/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.77
 * Generated at: 2022-04-11 05:42:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.kos_005fjsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Enumeration;

public final class param_005fA_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Enumeration");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>param_A.jsp</title>\r\n");
      out.write("<!-- \r\n");
      out.write("	jQuery CDN 을 사용해서 \r\n");
      out.write("	/kos_jsp/param_B.jsp 파일 을 만들어서\r\n");
      out.write(" 	jQuery click 함수를 이용해서 /kos_jsp/param_A.jsp 의\r\n");
      out.write(" 	form 태그에 있는 데이터 전송하기\r\n");
      out.write(" 	click 이벤트는 버튼에 하기  \r\n");
      out.write(" -->\r\n");
      out.write(" <!-- 1. jQuery CDN -->\r\n");
      out.write(" <!-- jQuery CDN 불러오기  -------------------------------------------->\r\n");
      out.write("<script  src=\"http://code.jquery.com/jquery-latest.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<!-- 2. 스크립트 블럭  -->\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	alert(\"스크립트 블럭\");\r\n");
      out.write("\r\n");
      out.write("	// 3. jQuery ready() 함수 블럭 만들기 : html 문서가 로딩 된 이후에 jQuery가 동작을 해야 한다.\r\n");
      out.write("	$(document).ready(function(){\r\n");
      out.write("		alert(\"jQuery ready() 함수 블럭 \");\r\n");
      out.write("		// 4. 버튼 이벤트 \r\n");
      out.write("		\r\n");
      out.write("		$(\"#mid_btn\").click(function(){\r\n");
      out.write("			alert(\"mid_btn 함수 블럭 \");\r\n");
      out.write("			// 5. form 태그 세팅\r\n");
      out.write("			// http://localhost:8088/kosMember_YYS/kos_jsp/param_8.jsp\r\n");
      out.write("			$(\"#paramForm_A\").attr({\r\n");
      out.write("				\"action\":\"/kosMember_YYS/kos_jsp/param_8.jsp\",\r\n");
      out.write("				\"method\":\"GET\"\r\n");
      out.write("			}).submit();\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("	});\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h3>param_A.jsp</h3>\r\n");
      out.write("<hr>\r\n");

// 스크립틀릿 : 자바코드를 기술한다.
	// <input type="text" class="mid" name="mid" id="mid" />	
	// request : 내장형 오브젝트 
	String mid = request.getParameter("mid");
	// <input type="text" class="mpw" name="mpw" id="mpw" />
	String mpw = request.getParameter("mpw");
	
	System.out.println("mid >>> : " + mid);
	System.out.println("mpw >>> : " + mpw);	

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- &lt;%= mid %&gt; 표현식 : 자바코드를 웹브라우저에 출력하는 것  -->\r\n");
      out.write("\r\n");
      out.write("&lt;%= mid %&gt; -> ");
      out.print( mid );
      out.write("<br>\r\n");
      out.write("&lt;%= mpw %&gt; -> ");
      out.print( mpw );
      out.write("<br>\r\n");
      out.write("<h3>param_A.jsp 에서 form 태그로 전송하기</h3> \r\n");
      out.write("<hr>\r\n");
      out.write("<h3>el : Expression Language</h3>\r\n");
      out.write("<hr>\r\n");
      out.write("${ param.mid } -> ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ param.mid }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("<br>\r\n");
      out.write("${ param.mpw } -> ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ param.mpw }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("<br>  \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<form name=\"paramForm_A\" id=\"paramForm_A\">\r\n");
      out.write("<input type=\"text\" class=\"mid\" name=\"mid\" id=\"mid\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ mid }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"/>\r\n");
      out.write("<input type=\"text\" class=\"mpw\" name=\"mpw\" id=\"mpw\" value=\"");
      out.print( mpw );
      out.write("\"/>\r\n");
      out.write("<input type=\"button\" id=\"mid_btn\" value=\"보내기\" />\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
