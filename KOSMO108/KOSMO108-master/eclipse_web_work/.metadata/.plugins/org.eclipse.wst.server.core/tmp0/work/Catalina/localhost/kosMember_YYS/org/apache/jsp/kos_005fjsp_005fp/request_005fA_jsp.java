/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.77
 * Generated at: 2022-04-11 14:18:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.kos_005fjsp_005fp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import java.util.HashMap;
import java.util.ArrayList;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import a.b.c.common.KosmoConnProperty;

public final class request_005fA_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.apache.log4j.Logger");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("a.b.c.common.KosmoConnProperty");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("org.apache.log4j.LogManager");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!-- log4j 객체 import  -->\r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- HashMap, ArrayList 불러오기 -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- JDBC 객체 import -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!--  Connection 공통 클래스 import : KosConnectivity -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>REQUEST SCOPE</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/kosMember_YYS/css/yysColor.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<h3>REQUEST SCORE</h3>\r\n");
      out.write("<hr>\r\n");
      out.write("\r\n");

	Logger logger=LogManager.getLogger(this.getClass());
	logger.info("request_A.jsp  >>>> : ");
	
	// 데이터베이스 연결 
	Connection conn=KosmoConnProperty.getConnection();
	logger.info("conn >>> : "+conn);
	String sqls="SELECT A.* FROM EMP A";
	PreparedStatement pstmt=conn.prepareStatement(sqls);
	ResultSet rsRs=pstmt.executeQuery();
	
	ArrayList<HashMap<String, String>> aList=null;
	
	if(rsRs !=null){
		aList=new ArrayList<HashMap<String, String>>();
		while(rsRs.next()){
			HashMap<String, String> hp=new HashMap<String, String>();
			hp.put("empno", rsRs.getString("EMPNO"));
			hp.put("ename", rsRs.getString("ENAME"));
			hp.put("job", rsRs.getString("JOB"));
			hp.put("mgr", rsRs.getString("MGR"));
			hp.put("hiredate", rsRs.getString("HIREDATE"));
			hp.put("sal", rsRs.getString("SAL"));
			hp.put("comm", rsRs.getString("COMM"));
			hp.put("deptno", rsRs.getString("DEPTNO"));
			
			aList.add(hp);
		}
	}
	
	/*
	https://tomcat.apache.org/tomcat-8.0-doc/servletapi/index.html
	
	javax.servlet.ServletContext
	
	void setAttribute(java.lang.String name,
                java.lang.Object o)
	Stores an attribute in this request. Attributes are 
	reset between requests. This method is most often used 
	in conjunction with RequestDispatcher.
	
	name : a String specifying the name of the attribute
	o : the Object to be stored
	*/
	
	
	request.setAttribute("aList", aList);
	
	// javax.servlet.RequestDispatcher
	
	/* RequestDispatcher getRequestDispatcher(java.lang.String path)
	   Returns a RequestDispatcher object that acts as a wrapper 
	   for the resource located at the given path.
	   The pathname must begin with a "/" and is interpreted 
	   as relative to the current context root.
	   Use getContext to obtain a RequestDispatcher for resources 
	   in foreign contexts.
	*/
	
	RequestDispatcher rd=request.getRequestDispatcher("/kos_jsp_p/request_B.jsp");
	// /kosMember_YYS/kos_jsp_p/request_B.jsp에서 컨텍스트 빼야함.
	// 이유 : 컨텍스트 간 이동이 불가하므로, 컨텍스트가 이미 포함되어있음.
	
	
	// javax.servlet.RequestDispatcher
	
	rd.forward(request, response);
	/*
	void forward(ServletRequest request,
           ServletResponse response)
             throws ServletException,
                    java.io.IOException
                    
    Forwards a request from a servlet to another resource
    (servlet, JSP file, or HTML file) on the server. 
    This method allows one servlet to do preliminary 
    processing of a request and another resource to generate 
    the response.                    
	*/ 

      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
