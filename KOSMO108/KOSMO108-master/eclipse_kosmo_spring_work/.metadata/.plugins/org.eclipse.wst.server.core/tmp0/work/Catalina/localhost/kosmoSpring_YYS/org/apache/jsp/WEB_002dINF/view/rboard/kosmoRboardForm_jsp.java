/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.77
 * Generated at: 2022-05-27 07:01:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view.rboard;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import a.b.c.com.kosmo.board.vo.KosmoBoardVO;
import a.b.c.com.kosmo.rboard.vo.KosmoRboardVO;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

public final class kosmoRboardForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.apache.log4j.Logger");
    _jspx_imports_classes.add("a.b.c.com.kosmo.rboard.vo.KosmoRboardVO");
    _jspx_imports_classes.add("a.b.c.com.kosmo.board.vo.KosmoBoardVO");
    _jspx_imports_classes.add("org.apache.log4j.LogManager");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

Logger logger=LogManager.getLogger(this.getClass());
logger.info("kosmoRboardForm.jsp 페이지입니당 >>> : ");

      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script  src=\"http://code.jquery.com/jquery-latest.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	$(document).ready(function(){\r\n");
      out.write("		// alert(\"kosmoRboardForm jsp 페이지 로딩 완료 + jQuery ready~\");\r\n");
      out.write("		\r\n");
      out.write("		// rkbcontent 길이 제한 200byte\r\n");
      out.write("		$(\"#rkbcontent\").keyup(function(){\r\n");
      out.write("			cut_200(this);\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		// 댓글 전체 불러오기\r\n");
      out.write("		selectAll();\r\n");
      out.write("		\r\n");
      out.write("		// 댓글 등록\r\n");
      out.write("		$(document).on(\"click\", \"#rinsertBtn\", function(){\r\n");
      out.write("			alert(\"등록하기 버튼을 클릭하셨습니다 >>> : \");\r\n");
      out.write("			\r\n");
      out.write("			let insertURL=\"kosmoRboardInsert.yys\";\r\n");
      out.write("			let method=\"POST\";\r\n");
      out.write("			let dataParam={\r\n");
      out.write("					kbnum: $(\"#kbnum\").val(),\r\n");
      out.write("					ksbname:$(\"#rkbname\").val(),\r\n");
      out.write("					ksbcontent:$(\"#rskcontent\").val(),\r\n");
      out.write("			};\r\n");
      out.write("			dataParam=$(\"#rboardForm\").serialize();\r\n");
      out.write("			console.log(\"dataParam >>> : \"+dataParam);\r\n");
      out.write("			\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url:insertURL,\r\n");
      out.write("				type:method,\r\n");
      out.write("				data:dataParam,\r\n");
      out.write("				success:whenSuccess,\r\n");
      out.write("				error:whenError\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			function whenSuccess(resData){\r\n");
      out.write("				alert(\"resData >>> : \"+resData);\r\n");
      out.write("				if(\"GOOD\"==resData){\r\n");
      out.write("					rboardFormData();\r\n");
      out.write("					// location.reload();\r\n");
      out.write("					selectAll();\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("			function whenError(e){\r\n");
      out.write("				alert(\"e >>> : \"+e.responseText);\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		/* // 댓글 삭제\r\n");
      out.write("		$(document).on(\"click\", \".deleteBtn\", function(){\r\n");
      out.write("			console.log(\"D >>> : \");\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("		*/\r\n");
      out.write("	});\r\n");
      out.write("		\r\n");
      out.write("		// 게시글 번호로 댓글 전체 조회 ===============\r\n");
      out.write("		function selectAll(){\r\n");
      out.write("			console.log(\"SALL >>> : \");\r\n");
      out.write("			\r\n");
      out.write("			let selectAllURL=\"kosmoRboardSelectAll.yys\";\r\n");
      out.write("			let method=\"POST\";\r\n");
      out.write("			let dataParam={\r\n");
      out.write("				kbnum:$(\"#kbnum\").val(),\r\n");
      out.write("			};\r\n");
      out.write("			dataParam=$(\"#rboardForm\").serialize();\r\n");
      out.write("			console.log(\"dataParam >>> : \"+dataParam);\r\n");
      out.write("			\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url:selectAllURL,\r\n");
      out.write("				type:method,\r\n");
      out.write("				data:dataParam,\r\n");
      out.write("				success:whenSuccess,\r\n");
      out.write("				error:whenError\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			function whenSuccess(resData){\r\n");
      out.write("				alert(\"whenSucess resData >>> : \"+resData);\r\n");
      out.write("				\r\n");
      out.write("				if(isEmpty(resData)){\r\n");
      out.write("					return false;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				let v=resData.split(\"&\");\r\n");
      out.write("				for(let i=0; i<v.length; i++){\r\n");
      out.write("					console.log(v[i]);\r\n");
      out.write("					let vv=v[i].split(\",\");\r\n");
      out.write("					console.log(\"vv.length >>> : \"+vv.length);\r\n");
      out.write("					let j=0;\r\n");
      out.write("					for (; j<vv.length-1; j++){\r\n");
      out.write("						console.log(\"vv[0] >>> : \"+vv[0]);\r\n");
      out.write("						console.log(\"vv[1] >>> : \"+vv[1]);\r\n");
      out.write("						console.log(\"vv[2] >>> : \"+vv[2]);\r\n");
      out.write("						console.log(\"vv[3] >>> : \"+vv[3]);\r\n");
      out.write("					}\r\n");
      out.write("					addNewItem(vv[0],vv[1],vv[2],vv[3]);\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("			function whenError(e){\r\n");
      out.write("				console.log(\"e >>> : \"+e.responseText);\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("			// 새로운 글 화면에 추가\r\n");
      out.write("		function addNewItem(num, writer, content, datetime){\r\n");
      out.write("			// 데이터 체크\r\n");
      out.write("			if(isEmpty(num)) return false;\r\n");
      out.write("			\r\n");
      out.write("			// 새로운 글이 추가될 li 태그\r\n");
      out.write("			var newLi=$(\"<li>\");\r\n");
      out.write("			newLi.attr(\"dataNum\", num);\r\n");
      out.write("			newLi.addClass(\"rbmemoItem\");\r\n");
      out.write("			\r\n");
      out.write("			// 작성자 정보가 지정될 <p> 태그\r\n");
      out.write("			var writerP=$(\"<p>\");\r\n");
      out.write("			writerP.addClass(\"writer\");\r\n");
      out.write("			\r\n");
      out.write("			// 작성자 정보의 이름\r\n");
      out.write("			var nameSpan=$(\"<span>\");\r\n");
      out.write("			nameSpan.addClass(\"name\");\r\n");
      out.write("			nameSpan.html(decodeURIComponent(writer)+\"님\");\r\n");
      out.write("			\r\n");
      out.write("			// 작성일시\r\n");
      out.write("			var dateSpan=$(\"<span>\");\r\n");
      out.write("			dateSpan.html(\" / \"+datetime+\" \");\r\n");
      out.write("			\r\n");
      out.write("			// 삭제 버튼\r\n");
      out.write("			var delInput=$(\"<input>\");\r\n");
      out.write("			delInput.attr({\"type\":\"button\", \"value\":\"삭제하기\"});\r\n");
      out.write("			delInput.addClass(\"deleteBtn\");\r\n");
      out.write("			\r\n");
      out.write("			// 내용\r\n");
      out.write("			var contentP=$(\"<p>\");\r\n");
      out.write("			contentP.html(decodeURIComponent(content));\r\n");
      out.write("			\r\n");
      out.write("			// 조립하기\r\n");
      out.write("			writerP.append(nameSpan).append(dateSpan).append(delInput);\r\n");
      out.write("			newLi.append(writerP).append(contentP);\r\n");
      out.write("			console.log(\"<<<<<<<<>>>>>>>>>>>\");\r\n");
      out.write("			$(\"#rboardlist\").append(newLi);\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		// 댓글 길이 체크 ===============\r\n");
      out.write("		// 한글 포함 문자열 길이 ==========\r\n");
      out.write("		function getTextLength(s){\r\n");
      out.write("			var len=0;\r\n");
      out.write("			for(var i=0; i<s.length; i++){\r\n");
      out.write("				if(escape(s.charAt(i)).length==6){\r\n");
      out.write("					len++;\r\n");
      out.write("				}\r\n");
      out.write("				len++;\r\n");
      out.write("			}\r\n");
      out.write("			return len;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		function cut_200(obj){\r\n");
      out.write("			var t=$(obj).val();\r\n");
      out.write("			var l=t.length;\r\n");
      out.write("			while(getTextLength(t)>200){\r\n");
      out.write("				l--;\r\n");
      out.write("				t=t.substring(0,1);\r\n");
      out.write("			}\r\n");
      out.write("			$(obj).val(t);\r\n");
      out.write("			$('.bytes').text(getTextLength(t));\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		// 댓글 등록 후 입력창 초기화\r\n");
      out.write("		function rboardFormData(){\r\n");
      out.write("			$(\"#rkbname\").val(\"\");\r\n");
      out.write("			$(\"#rkbconttent\").val(\"\");\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		// 데이터 체크\r\n");
      out.write("		function isEmpty(val){\r\n");
      out.write("			if(typeof val==\"undefined\" || val==null || val==\"\"){\r\n");
      out.write("				return true;\r\n");
      out.write("			}else{\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("		}	\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h3>댓글</h3>\r\n");
      out.write("<hr>\r\n");
 request.setCharacterEncoding("UTF-8"); 
      out.write('\r');
      out.write('\n');
	
	String kbnum=request.getParameter("kbnum");
	logger.info("kosmoRboardForm.jsp kbnum >>> : "+kbnum);

      out.write("\r\n");
      out.write("<div id=\"rbwriterdiv\">\r\n");
      out.write("<form name=\"rboardForm\" id=\"rboardForm\">\r\n");
      out.write("<table>\r\n");
      out.write("<tr>\r\n");
      out.write("	<td>작성자</td>\r\n");
      out.write("	<td>\r\n");
      out.write("			<input type=\"text\" name=\"rkbname\" id=\"rkbname\"/>\r\n");
      out.write("			<input type=\"hidden\" name=\"kbnum\" id=\"kbnum\" value=\"");
      out.print( kbnum );
      out.write("\">\r\n");
      out.write("			<input type=\"hidden\" name=\"rkbnum\" id=\"rkbnum\">\r\n");
      out.write("		<input type=\"button\" value=\"저장하기\" id=\"rinsertBtn\">\r\n");
      out.write("	</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("	<td>덧글 내용</td>\r\n");
      out.write("	<td>\r\n");
      out.write("		<textarea name=\"rkbcontent\" id=\"rkbcontent\" rows=\"5\" cols=\"50\" style=\"resize:none\"></textarea>\r\n");
      out.write("		<div><span class=\"bytes\">0</span>bytes</div>\r\n");
      out.write("	</td>\r\n");
      out.write("</tr>\r\n");
      out.write("</table>\r\n");
      out.write("<hr>\r\n");
      out.write("<ul name=\"rboardlist\" id=\"rboardlist\">\r\n");
      out.write("<!--  여기에 동적 생성 요소가 들어온다. -->\r\n");
      out.write("</ul>\r\n");
      out.write("</form>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
