/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.77
 * Generated at: 2022-03-24 07:56:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.javascriptp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class js_005f4p_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>function</title>\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("	// 함수 선언\r\n");
      out.write("	function fun_1(){\r\n");
      out.write("		return 1+2;\r\n");
      out.write("	}\r\n");
      out.write("	var f_1=fun_1();\r\n");
      out.write("	console.log(\"f_1 >>> : \"+f_1);\r\n");
      out.write("	// f_1 >>> : 3\r\n");
      out.write("\r\n");
      out.write("	function fun_2(a,b){\r\n");
      out.write("		return a+b;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	var f_2=fun_2(1,2);\r\n");
      out.write("	console.log(\"f_2 >>> : \"+f_2);\r\n");
      out.write("	// f_2 >>> : 3\r\n");
      out.write("	\r\n");
      out.write("	// 익명 함수\r\n");
      out.write("	// 함수이름이 없음\r\n");
      out.write("	var f_3 = function(a,b){\r\n");
      out.write("		return a+b;\r\n");
      out.write("	}\r\n");
      out.write("	document.write(\"f_3(1,2) >>> : \"+f_3(1,2));\r\n");
      out.write("	// 개발자 도구 말고 화면에 f_3(1,2) >>> : 3 이렇게 나옴\r\n");
      out.write("	\r\n");
      out.write("	// 즉시 실행 함수\r\n");
      out.write("	(function () {console.log(\"즉시 실행 함수\")}());\r\n");
      out.write("	// 즉시 실행 함수\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	// 화살표 함수\r\n");
      out.write("	// function() 조차 없음\r\n");
      out.write("	var hi=() => {return \"안녕하세요 화살표 함수\";}\r\n");
      out.write("	\r\n");
      out.write("	let say=()=>alert(\"hi!!\");\r\n");
      out.write("	// 알럿으로 localhost:8088 내용 : hi!! 이렇게 나옴\r\n");
      out.write("	say();\r\n");
      out.write("	\r\n");
      out.write("	let d=n=>n*2;\r\n");
      out.write("	alert(\"d(3) >>> : \"+d(3));\r\n");
      out.write("	// 알럿으로 localhost:8088 내용 : 6 이렇게 나옴\r\n");
      out.write("	/*\r\n");
      out.write("		let d=function(n){\r\n");
      out.write("			return n*2;\r\n");
      out.write("		}\r\n");
      out.write("	*/\r\n");
      out.write("	\r\n");
      out.write("	var sum=(a,b) =>a+b;\r\n");
      out.write("	/*\r\n");
      out.write("		var sum=function(a,b){\r\n");
      out.write("			return a+b;\r\n");
      out.write("		}\r\n");
      out.write("	*/\r\n");
      out.write("	alert(\"sum(1, 2) >>> : \"+sum(1,2)); \r\n");
      out.write("	</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<p id=\"name\">강민</p>\r\n");
      out.write("	<script>\r\n");
      out.write("		document.getElementById('name').innerHTML=\"강감찬 20대손\";\r\n");
      out.write("		// 화면에 강민이 아니라 강감찬으로 표기되어서 나옴\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
