/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.77
 * Generated at: 2022-04-27 01:09:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.kos_005fscript_005fp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class popup_005f3_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>공지사항 팝업</title>\r\n");
      out.write("\r\n");
      out.write("<!-- 뷰포트 : device에 맞게 화면 크기 조정 -->\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \r\n");
      out.write("\r\n");
      out.write("<!-- \r\n");
      out.write("	레이어 팝업 드래그 하기 위해서 jquery ui draggable 라이브러리 사용\r\n");
      out.write("	https://jqueryui.com/draggable/\r\n");
      out.write(" -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.13.1/themes/base/jquery-ui.css\">\r\n");
      out.write("<!--  \r\n");
      out.write("<link rel=\"stylesheet\" href=\"//resources/demos/style.css\">\r\n");
      out.write("-->\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.6.0.js\"></script>\r\n");
      out.write("<script src=\"https://code.jquery.com/ui/1.13.1/jquery-ui.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<!-- \r\n");
      out.write("<script src=\"http://code.jquery.com/jquery-latest.min.js\"></script>\r\n");
      out.write(" -->  \r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("	$(document).ready(function(){\r\n");
      out.write("		\r\n");
      out.write("		$(\"#noticePop\").draggable();\r\n");
      out.write("		// jQuery user interface\r\n");
      out.write("		\r\n");
      out.write("		// <input type=\"button\" id=\"popBtn\" value=\"닫기\" />\r\n");
      out.write("		$('#popBtn').on('click', function(){\r\n");
      out.write("			alert(\"popBtn >>> : \");\r\n");
      out.write("			\r\n");
      out.write("			let chkVal = $(\"#chkpop\").is(\":checked\");\r\n");
      out.write("			alert(\"checkbox checked >>> : \" + chkVal);\r\n");
      out.write("			// true\r\n");
      out.write("			\r\n");
      out.write("			/*\r\n");
      out.write("			if (chkVal){\r\n");
      out.write("				\r\n");
      out.write("				// Ajax 처리 루틴\r\n");
      out.write("				let urlV = \"/kosMember/kos_script/popup_cookie.jsp\";\r\n");
      out.write("				let typeV = 'GET';\r\n");
      out.write("				let dataV = $(\"#chkpop\").val();\r\n");
      out.write("				alert(\"dataV >>> : \" + dataV);			\r\n");
      out.write("				\r\n");
      out.write("				// $.ajax({});\r\n");
      out.write("				// $.(\"폼네임\").attr({}).submit();\r\n");
      out.write("				\r\n");
      out.write("				if (chkVal){\r\n");
      out.write("					$.ajax({\r\n");
      out.write("						url: urlV,\r\n");
      out.write("						type: typeV,\r\n");
      out.write("						data: { \"chkpop\": dataV },					\r\n");
      out.write("						success : whenSuccess,					\r\n");
      out.write("						error : whenError\r\n");
      out.write("					});				\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				function whenSuccess(resData){\r\n");
      out.write("					alert(\"리턴 데이터 >>> : \\n\" + resData);\r\n");
      out.write("					var bool = $(resData).find('result').text();\r\n");
      out.write("					alert(\"bool >>> : \" + bool);\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				function whenError(){\r\n");
      out.write("					alert(\"에러가 >>> : \");\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("			*/\r\n");
      out.write("			$('#noticePop').hide();\r\n");
      out.write("			// Description : Hide the matched elements.\r\n");
      out.write("			$('.imgPop').hide();\r\n");
      out.write("		});	\r\n");
      out.write("	});\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("<style>\r\n");
      out.write("	body{\r\n");
      out.write("		background-color:#ffe6ff;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	div#noticePop {\r\n");
      out.write("		potition: absolute;\r\n");
      out.write("		top: 50px; \r\n");
      out.write("		left: 50px;\r\n");
      out.write("		color: black;\r\n");
      out.write("		border: 1px solid red;\r\n");
      out.write("		width: 300px;\r\n");
      out.write("		height: 300px;\r\n");
      out.write("		text-align: center;\r\n");
      out.write("		background-color: #99ff99; /* #ffffff */\r\n");
      out.write("		box-shadow: 30px 30px grey;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	div#noticePop > div {\r\n");
      out.write("		position: relative;				\r\n");
      out.write("		top: 0px;\r\n");
      out.write("		border: 1px solid gray;\r\n");
      out.write("		padding: 10px;\r\n");
      out.write("		color: black;\r\n");
      out.write("		background-color: #ffffb3; /* #fff */\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

	boolean popState = true;

      out.write(" \r\n");
      out.write("<h2>NOTICE POPUP</h2>\r\n");
      out.write("<hr>\r\n");

	if (popState){

      out.write("\r\n");
      out.write("		<div id=\"noticePop\">\r\n");
      out.write("			<h4>이무진 - 신호등 광고</h4>\r\n");
      out.write("			<hr>\r\n");
      out.write("			<div class=\"imgPop\">\r\n");
      out.write("				<form name=\"noticePopForm\" id=\"noticePopForm\">\r\n");
      out.write("					<img class=\"img_1\" src=\"/kosServlet_YYS/image/10607796_20210513201807_500.jpg\"  width=\"150\" height=\"150\"><br>										\r\n");
      out.write("					<input type=\"checkbox\" class=\"chkpop\" name=\"chkpop\" id=\"chkpop\" value=\"01\" />\r\n");
      out.write("					하루 동안 열지 않음 \r\n");
      out.write("					<input type=\"button\" id=\"popBtn\" value=\"닫기\" />\r\n");
      out.write("				</form>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
		
	}else{

      out.write("\r\n");
      out.write("		");
      out.print( "공지사항 팝업 없음" );
      out.write('\r');
      out.write('\n');
		
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
